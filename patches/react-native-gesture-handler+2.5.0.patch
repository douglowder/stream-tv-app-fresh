diff --git a/node_modules/react-native-gesture-handler/RNGestureHandler.podspec b/node_modules/react-native-gesture-handler/RNGestureHandler.podspec
index 100d320..6162074 100644
--- a/node_modules/react-native-gesture-handler/RNGestureHandler.podspec
+++ b/node_modules/react-native-gesture-handler/RNGestureHandler.podspec
@@ -1,6 +1,6 @@
 require "json"
 
-fabric_enabled = ENV['RCT_NEW_ARCH_ENABLED']
+fabric_enabled = ENV['RCT_NEW_ARCH_ENABLED'] == 1
 
 Pod::Spec.new do |s|
   # NPM package specification
@@ -14,6 +14,7 @@ Pod::Spec.new do |s|
   s.author       = { package["author"]["name"] => package["author"]["email"] }
   s.source       = { :git => "https://github.com/software-mansion/react-native-gesture-handler", :tag => "#{s.version}" }
   s.source_files = "ios/**/*.{h,m,mm}"
+  s.tvos.exclude_files = "ios/Handlers/*.{h,m,mm}"
   s.requires_arc = true
 
   if fabric_enabled
diff --git a/node_modules/react-native-gesture-handler/ios/RNGestureHandler.m b/node_modules/react-native-gesture-handler/ios/RNGestureHandler.m
index 19ee0f3..8093090 100644
--- a/node_modules/react-native-gesture-handler/ios/RNGestureHandler.m
+++ b/node_modules/react-native-gesture-handler/ios/RNGestureHandler.m
@@ -354,12 +354,13 @@ static NSHashTable<RNGestureHandler *> *allGestureHandlers;
     while (reactView != nil && reactView.reactTag == nil) {
         reactView = reactView.superview;
     }
-
+#if !TARGET_OS_TV
     for (UIGestureRecognizer *recognizer in reactView.gestureRecognizers) {
         if ([recognizer isKindOfClass:[RNDummyGestureRecognizer class]]) {
             return recognizer.gestureHandler;
         }
     }
+#endif
 
     return nil;
 }
@@ -367,6 +368,7 @@ static NSHashTable<RNGestureHandler *> *allGestureHandlers;
 - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
 {
+#if !TARGET_OS_TV
     RNGestureHandler *handler = [RNGestureHandler findGestureHandlerByRecognizer:otherGestureRecognizer];
     if ([handler isKindOfClass:[RNNativeViewGestureHandler class]]) {
         for (NSNumber *handlerTag in handler->_handlersToWaitFor) {
@@ -375,6 +377,7 @@ shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)otherGestureRec
             }
         }
     }
+#endif
 
     return NO;
 }
diff --git a/node_modules/react-native-gesture-handler/ios/RNGestureHandlerManager.mm b/node_modules/react-native-gesture-handler/ios/RNGestureHandlerManager.mm
index 83b3d9b..89405de 100644
--- a/node_modules/react-native-gesture-handler/ios/RNGestureHandlerManager.mm
+++ b/node_modules/react-native-gesture-handler/ios/RNGestureHandlerManager.mm
@@ -26,6 +26,7 @@
 #import <React/RCTTouchHandler.h>
 #endif // RN_FABRIC_ENABLED
 
+#if !TARGET_OS_TV
 #import "Handlers/RNPanHandler.h"
 #import "Handlers/RNTapHandler.h"
 #import "Handlers/RNFlingHandler.h"
@@ -35,6 +36,7 @@
 #import "Handlers/RNRotationHandler.h"
 #import "Handlers/RNForceTouchHandler.h"
 #import "Handlers/RNManualHandler.h"
+#endif
 
 // We use the method below instead of RCTLog because we log out messages after the bridge gets
 // turned down in some cases. Which normally with RCTLog would cause a crash in DEBUG mode
@@ -70,6 +72,7 @@
                          tag:(NSNumber *)handlerTag
                       config:(NSDictionary *)config
 {
+#if !TARGET_OS_TV
     static NSDictionary *map;
     static dispatch_once_t mapToken;
     dispatch_once(&mapToken, ^{
@@ -98,6 +101,7 @@
     
     __weak id<RNGestureHandlerEventEmitter> emitter = self;
     gestureHandler.emitter = emitter;
+#endif
 }
 
 
diff --git a/node_modules/react-native-gesture-handler/ios/RNGestureHandlerRegistry.m b/node_modules/react-native-gesture-handler/ios/RNGestureHandlerRegistry.m
index cd3d894..9cb87e0 100644
--- a/node_modules/react-native-gesture-handler/ios/RNGestureHandlerRegistry.m
+++ b/node_modules/react-native-gesture-handler/ios/RNGestureHandlerRegistry.m
@@ -34,28 +34,34 @@
 
 - (void)attachHandlerWithTag:(NSNumber *)handlerTag toView:(UIView *)view withActionType:(RNGestureHandlerActionType)actionType
 {
+#if !TARGET_OS_TV
     RNGestureHandler *handler = _handlers[handlerTag];
     RCTAssert(handler != nil, @"Handler for tag %@ does not exists", handlerTag);
     [handler unbindFromView];
     handler.actionType = actionType;
     [handler bindToView:view];
+#endif
 }
 
 - (void)dropHandlerWithTag:(NSNumber *)handlerTag
 {
+#if !TARGET_OS_TV
     RNGestureHandler *handler = _handlers[handlerTag];
     [handler unbindFromView];
     [_handlers removeObjectForKey:handlerTag];
+#endif
 }
 
 - (void)dropAllHandlers
 {
+#if !TARGET_OS_TV
     for (NSNumber* tag in _handlers) {
         RNGestureHandler *handler = _handlers[tag];
         [handler unbindFromView];
     }
     
     [_handlers removeAllObjects];
+#endif
 }
 
 @end
